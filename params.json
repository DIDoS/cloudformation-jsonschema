{
  "name": "cloudformation-jsonschema",
  "tagline": "Json schema for AWS Cloudformation",
  "body": "An attempt to write a json schema (http://json-schema.org) for AWS Cloudformation.\r\n\r\nFor now, I'm scraping AWS documentation with PyQuery.\r\n\r\nThis is not your glossy software.\r\n\r\n### current state\r\nMany things are validated, but some are not: [resource property types](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-product-property-reference.html) are not validated yet.\r\nSome resource properties are not parsed properly, so their values are not validated.\r\n\r\nPreliminary hosted version of the schema can be found at http://fungusakafungus.github.io/cloudformation-jsonschema/v0.2/schema.json\r\n\r\n[![Build Status](https://travis-ci.org/fungusakafungus/cloudformation-jsonschema.svg?branch=master)](https://travis-ci.org/fungusakafungus/cloudformation-jsonschema)\r\n\r\n### how to use\r\nUse `./validate_template.py tests/examples-aws/Rails_Single_Instance.template` to validate cloudformation templates on the command line.\r\n\r\nUse `schema.json` programmatically to validate complete Cloudformation templates.\r\n\r\nUse `resource.json` to validate a single resource.\r\n\r\nThe schema consists of multiple files, `schema.json`, `resource.json` and `basic_types.json`. To resolve JSON pointers (`{\"$ref\": \"basic_types.json#/definitions/string\"}`) to files on local filesystem, you'll have to use a special resolver. See `val.py` for the example.\r\n\r\nUse released hosted version with [python-jsonschema](http://python-jsonschema.readthedocs.io/en/latest/):\r\n```python\r\nimport jsonschema, requests\r\n\r\nschema = requests.get('http://fungusakafungus.github.io/cloudformation-jsonschema/v0.2/schema.json').json()\r\njsonschema.validate(\r\n  {'Resources':{}, 'Outputs':{'o':{'Value':'test'}}},\r\n  schema\r\n)\r\n```\r\n\r\n\r\n### how to contribute\r\nSubmit false positive/negative issues with valid and invalid templates.\r\n\r\n#### hack the schema:\r\n\r\nCreate a virtualenv (`virtualenv venv; pip install -r requirements.txt`)\r\n\r\nYou can then scrape AWS documentation for cloudformation resource types and save it as jsonschema:\r\n\r\n```\r\n./create_resource_schema.py resource.json\r\n```\r\n\r\n### TODO\r\n - [x] specialized validator (the one which will tell you that this resource type is not known)\r\n - [x] tests with valid and invalid fragments for every feature. See `tests/test_stage1_valid.py`\r\n - [x] define a type for a basic cfn value (string, number or function call(Ref, Join) object)\r\n  - [x] Fn::Base64\r\n  - [x] Condition Functions\r\n  - [x] Fn::FindInMap\r\n  - [x] Fn::GetAtt\r\n  - [x] Fn::GetAZs\r\n  - [x] Fn::Join\r\n  - [x] Fn::Select\r\n  - [x] Ref\r\n  - [x] number\r\n  - [x] string\r\n - [x] integrate/link schema.json and resource.json\r\n - [x] travis/circleci\r\n - [ ] validate resource property types (listed here: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-product-property-reference.html)\r\n - [x] validate attributes (`Metadata`, `UpdatePolicy` and others)\r\n - [ ] make json objects more stable (use more OrderedDict)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}